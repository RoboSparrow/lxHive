#!/usr/bin/env php
<?php
/*
 * This file is part of lxHive LRS - http://lxhive.org/
 *
 * Copyright (C) 2017 Brightcookie Pty Ltd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with lxHive. If not, see <http://www.gnu.org/licenses/>.
 *
 * For authorship information, please view the AUTHORS
 * file that was distributed with this source code.
 */
$argv = $_SERVER['argv'];

if (isset($argv[0]) && is_dir($argv[0])) {
	$workingDirectory = $argv[0];
	array_shift($argv);
	$_SERVER['argv'] = $argv;
} else {
	$workingDirectory = __DIR__;
}

if (!file_exists($workingDirectory . '/public/index.php')) {
	echo 'You must run X from the root directory of your lxHive install or specify its correct path as the first argument!' . PHP_EOL;
	exit;
}

if (!file_exists($workingDirectory . '/vendor/autoload.php')) {
	echo 'You must run composer install before running X!' . PHP_EOL;
	exit;
}

require_once $workingDirectory . '/vendor/autoload.php';

use API\Bootstrap;
use Symfony\Component\Console\Application;
use API\Console\UserCreateCommand;
use API\Console\BasicTokenCreateCommand;
use API\Console\BasicTokenListCommand;
use API\Console\BasicTokenDeleteCommand;
use API\Console\BasicTokenExpireCommand;
use API\Console\OAuthClientCreateCommand;
use API\Console\OAuthClientListCommand;
use API\Console\AuthScopeCreateCommand;
use API\Console\SetupCommand;
use API\Console\SetupOAuthCommand;
// Sokil's Migrator will be removed after the MongoLegacy driver is removed
// TODO: Find a good library that implements migrations (up, down, current status, etc.)
use Sokil\Mongo\Migrator\Console\Command\Create as MigrationCreateCommand;
use Sokil\Mongo\Migrator\Console\Command\Init as MigrationInitCommand;
use Sokil\Mongo\Migrator\Console\Command\Migrate as MigrationMigrateCommand;
use Sokil\Mongo\Migrator\Console\Command\Rollback as MigrationRollbackCommand;
use Sokil\Mongo\Migrator\Console\Command\Status as MigrationStatusCommand;

// Bootstrapper
$bootstrapper = new Bootstrap();

// If container cannot be instantiated due to missing Config file, allow only Setup command to be executed!
try {
	$container = $bootstrapper->initCliContainer();
} catch (League\Flysystem\FileNotFoundException $e) {
	$application = new Application();
	$application->add(new SetupCommand());
	$application->run();
}


$application = new Application();
$application->add(new UserCreateCommand($container));
$application->add(new BasicTokenListCommand($container));
$application->add(new BasicTokenDeleteCommand($container));
$application->add(new BasicTokenExpireCommand($container));
$application->add(new BasicTokenCreateCommand($container));
$application->add(new OAuthClientCreateCommand($container));
$application->add(new OAuthClientListCommand($container));
$application->add(new AuthScopeCreateCommand($container));
$application->add(new SetupCommand($container));
$migrationCreateCommand = new MigrationCreateCommand();
$migrationCreateCommand->setName('db:migration:create');
$migrationInitCommand = new MigrationInitCommand();
$migrationInitCommand->setName('db:migration:init');
$migrationMigrateCommand = new MigrationMigrateCommand();
$migrationMigrateCommand->setName('db:migration:migrate');
$migrationRollbackCommand = new MigrationRollbackCommand();
$migrationRollbackCommand->setName('db:migration:rollback');
$migrationStatusCommand = new MigrationStatusCommand();
$migrationStatusCommand->setName('db:migration:status');
$application->add($migrationCreateCommand);
$application->add($migrationInitCommand);
$application->add($migrationMigrateCommand);
$application->add($migrationRollbackCommand);
$application->add($migrationStatusCommand);
$application->run();
 
?>
